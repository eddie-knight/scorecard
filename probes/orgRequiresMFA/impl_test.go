// Copyright 2021 OpenSSF Scorecard Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: clients/repo_client.go

package orgRequiresMFA

import (
	"errors"
	"testing"

	"github.com/ossf/scorecard/v5/checker"
	mockrepo "github.com/ossf/scorecard/v5/clients/mockclients"
	"github.com/ossf/scorecard/v5/finding"
	"github.com/ossf/scorecard/v5/probes/internal/utils/uerror"
)

// ConfigurableMockRepoClient mocks RepoClient with configurable return values.
type ConfigurableMockRepoClient struct {
	ReturnError error
	MFARequired bool
	mockrepo.MockRepoClient
}

// GetMFARequired returns the pre-set value for MFA requirement.
func (m *ConfigurableMockRepoClient) GetMFARequired() (bool, error) {
	return m.MFARequired, m.ReturnError
}

func (m *ConfigurableMockRepoClient) Close() error { return nil }

func TestProbeCodeApproved(t *testing.T) {
	t.Parallel()
	probeTests := []struct {
		name            string
		rawResults      *checker.CheckRequest
		expectedError   error
		expectedOutcome finding.Outcome
		expectedCount   int
	}{
		{
			name: "mfa check succeeded",
			rawResults: &checker.CheckRequest{
				RepoClient: &ConfigurableMockRepoClient{MFARequired: true, ReturnError: nil},
			},
			expectedError:   nil,
			expectedCount:   1,
			expectedOutcome: finding.OutcomeTrue,
		},
		{
			name: "error retrieving MFA status",
			rawResults: &checker.CheckRequest{
				RepoClient: &ConfigurableMockRepoClient{ReturnError: uerror.ErrNil},
			},
			expectedError:   uerror.ErrNil,
			expectedCount:   0,
			expectedOutcome: finding.OutcomeFalse,
		},
		{
			name:            "nil raw results",
			rawResults:      nil,
			expectedError:   uerror.ErrNil,
			expectedCount:   0,
			expectedOutcome: finding.OutcomeFalse,
		},
	}

	for _, tt := range probeTests {
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			found, probeName, err := Run(tt.rawResults)

			if probeName != Probe {
				t.Errorf("unexpected probe name: got %v, want %v", probeName, Probe)
			}

			if !errors.Is(err, tt.expectedError) {
				t.Errorf("unexpected error: got %v, want %v", err, tt.expectedError)
			}

			if len(found) != tt.expectedCount {
				t.Errorf("unexpected number of findings: got %d, want %d", len(found), tt.expectedCount)
			}

			if len(found) > 0 && found[0].Outcome != tt.expectedOutcome {
				t.Errorf("unexpected outcome: got %v, want %v", found[0].Outcome, tt.expectedOutcome)
			}
		})
	}
}
